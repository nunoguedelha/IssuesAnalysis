{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red148\green6\blue75;\red245\green245\blue245;\red38\green38\blue38;
\red255\green44\blue56;\red0\green61\blue204;\red0\green45\blue153;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh13180\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc

\f0\b\fs28 \cf0 \ul \ulc0 ISSUE #181 analysis\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \ulc0 \

\b0\fs24 \ulnone last update: 19 / 04 / 2015\

\b\fs28 \ul \
\
How to reproduce the issue :\

\b0\fs24 \ulnone \
1 - set the environment variable YARP_CLOCK to \'93/clock\'94\
2 - lunch     > yarpserver in one terminal\
3 - launch   > 
\f1\fs22 \CocoaLigature0 gazebo --verbose -s libgazebo_yarp_clock.so
\f0\fs24 \CocoaLigature1 \
4 - in gazebo, insert the \'93icub\'94 model\
5 - delete the model\
\
Below, the last gazebo server log messages you should see in the terminal :\
\
\pard\pardeftab720

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
***\cf4 \expnd0\expndtw0\kerning0
 GazeboYarpIMU closing \cf2 \expnd0\expndtw0\kerning0
***\cf4 \expnd0\expndtw0\kerning0
\
Closing Server Inertial...
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
=> Gazebo time in the Client is then freezed\
=> you can still run (in another terminal) the clock plugin roc interface (> yard roc /clock/rpc) :\
        pauseSimulation, continueSimulation, stepSimulation, resetSimulation have no effect on the simulator\
        getSimulationTime, getStepSize still return respective gazebo parameters (returns always the same freezed gazebo time) \
\
\
\

\b\fs28 \ul Debugging environment :
\b0\fs24 \ulnone \
\
- build (for Xcode) yarp, icub-main, codyco-superbuild, gazebo-yarp-plugins to the latest master versions\
- update environment variables for Xcode build paths\
- launch Xcode from terminal for inheriting the set environment variables\
- open YARP (
\f1\fs22 \CocoaLigature0 YARP.xcodeproj
\f0\fs24 \CocoaLigature1 ) and GazeboYarpPlugins (
\f1\fs22 \CocoaLigature0 GazeboYarpPlugins.xcodeproj
\f0\fs24 \CocoaLigature1 ) projects in Xcode (1 different window each)\
- proceed with steps 1 to 3 of previous section (run yarpserver and gazebo)\
- in Xcode, attach to the new running processes (go to menu \'93Debug\'94 \'97> \'93Attach to process\'94 and select the process by name or PID) :\
        YARP => process \'93yarpserver\'94\
        GazeboYarpPlugins => process \'93gzserver\'94\
- proceed with steps 4 to 5 of previous section\
- pause the process \'93gzserver\'94 in the debugger\
\
\

\b\fs28 \ul What is happening when YARP and GAZEBO hang during removal of the robot model :\

\b0\fs24 \ulnone \

\b 1 - Closure of SeverInertial blocked\'85
\b0 \
\
Pause the execution of \'93gzserver\'94 through GazeboYarpPlugins project interface. We can than see in the Debug navigator of Xcode the backtrace of all the running threads.\
\

\i\b gzsrver threads\'85
\i0\b0 \
\
thread 1 is in an infinite loop, closing the IMU. Below, the function call tree :\
	=> GazeboYarpIMU::~GazeboYarpIMU()\
		=> yarp::dev::PolyDriver::close()\
			=> yarp::dev::ServerInertial::close()		\'97\'97> displays 
\f1 \cf5 \CocoaLigature0 "Closing Server Inertial\'85\\n\'94,
\f0 \cf0 \CocoaLigature1 check if IMU object still exists, and in that case calls 
\i\b stop()
\i0\b0 \
				=> yarp::os::Thread::stop()   		\'97\'97> here, 
\i\b stopping
\i0\b0  is set to true, call 
\i\b onStop()
\i0\b0  function from 
\i ServerInertial
\i0  (IMU).\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx8502\pardirnatural
\cf0 					=> yarp::os::impl::ThreadImpl::close()	\'97\'97> 
\i ThreadImpl
\i0  holds services and sets semaphores for handling threads (create, run, stop, close)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx8502\tx8524\pardirnatural
\cf0 													\'97\'97> 
\i\b closing
\i0\b0  set to true.\
						=> yarp::os::impl::ThreadImpl::join(
\b -1
\b0 )	\'97\'97> 
\b blocking call without timeout
\b0 \
							=> ACE_Thread::join(
\b hid
\b0 , NULL)		\'97\'97> 
\i\b hid
\i0\b0  is the thread ID\
								\'85 semwait_signal			\'97\'97> we stay indefinitely waiting for the thread to be terminated and released (handled through a semaphore)\
\
\

\b 2 - thread running ServerInertial\'85
\b0 \
\
We can now look for the thread executing the 
\i\b run()
\i0\b0  method of 
\i ServerInertial
\i0 . For this we can either :\
- search for yarp::dev::ServerInertial::run() in the code, set a breakpoint there and identify the respective running thread\
- search in the whole threads backtrace the
\i\b ThreadCallbackAdapter
\i0\b0  address. This leads to the owner (
\i ServerInertial
\i0 ) since 
\i\b ThreadCallbackAdapter
\i0\b0  calls the owner\'92s 
\i\b run()
\i0\b0 .\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 				\
We match the thread running 
\i\b yarp::dev::ServerInertial::run()
\i0\b0  (thread 22 in analysed log). The thread is indefinitely waiting for a semaphore (\'91semaphore_wait_trap\'92) :\
\
\pard\tx674\pardeftab674\pardirnatural
\cf6 yarp::dev::ServerInertial::run()\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf6 \{\
	\'85\
	while(!isStopping())			<\'97\'97	break condition is stopping=TRUE.\
	\{\
		\'85\
		// publish on YARP port Measurement data, ROS topic if required\
		\'85\

\b \cf0 		yarp::os::Time::delay(k)	<\'97\'97	minimum delay for the polling of stopping (k happens to be 0.01 s). The thread hangs here.\

\b0 \cf6 	\}\
	\'85\
\}\
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\i\b \cf0 yarp::os::Time::delay(k) - - - - > 
\i0  yarp::os::NetworkClock::delay(double) \'97> yarp::os::Semaphore::wait() \'97> semaphore_wait_trap\

\b0 \
\
At this point, we know that :\
=> we don\'92t get back from the delay, an so, never return from 
\i\b thread->run()
\i0\b0 \
=> never execute 
\i\b thread->threadRelease()
\i0\b0 \
=> don\'92t release the semaphore blocking the thread 1 (closure of ServerInertial)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\

\b 3 - YARP Network clock and delay blocked\'85
\b0 \
\
In NetworkClock class, delays are handled through semaphores, in a list (class 
\i\b Waiters
\i0\b0 ) of pairs (timeout delay | semaphore). This list is updated periodicaly by 
\b NetworkClock::read(..)
\b0 . This function releases semaphores which timed out.\
After the Robot model is removed, a breakpoint in this method will never trigger. We then check the normal call tree when not removing the robot model :\
\
\pard\tx674\tx1142\tx1704\tx2265\pardeftab674\pardirnatural
\cf0 	PortCoreInputUnit::run()\
		=> ip->beginRead()											(reading carrier specific preamble)\
\pard\tx674\tx1142\tx1704\tx2265\pardeftab720\sl320
\cf0 			=> man.readBlock(ip->getReceiver().modifyIncomingData(br),id,os);		[PortCore::readBlock(ConnectionReader& reader, void *id, OutputStream *os)]\
				=>result = this->reader->read(reader);						[PortCoreAdapterread(ConnectionReader& reader)]\
					=>permanentReadDelegate->read(reader);				[NetworkClock::read]\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
After the robot is removed, we get stuck in 
\i\b beginRead()
\i0\b0 , waiting for the next data on from /clock port to arrive.\
\
So we can conclude that the clock data is not published in the /clock port and that this causing the whole setup to hang. Current design does not allow the clock data to be interrupted.\
\

\b 4 - gazebo yarp clock plugin and gazebo\'85
\b0 \
\
\pard\tx674\pardeftab674\pardirnatural
\cf0 GazeboYarpClock::clockUpdate() is called at onUpdate events of gazebo, for reading gazebo clock and publishing it to /clock port.\
A breakpoint in this function will never trigger after the robot model has been removed. Also, the gazebo timing is freezes as m_world->GetSimTime() will return always the same value. Actually, gazebo is waiting for the Server Inertial to close (blog with the other model components) before updating his world simulationg clock, which makes sense (\'93instantaneous removal\'94).\
\
If we hack the GazeboYarpClock::clockStep method for generating artificially a clock into /clock port, we unblock YARP and Gazebo and all returns to normal until next model removal.\
\cf7 \
    void GazeboYarpClock::clockStep(unsigned int step)\
    \{\
        static gazebo::common::Time currentTime = m_world->GetSimTime();\
        gazebo::common::Time endTime = currentTime;\
        endTime += 0.05; // total wait of 5s\
        if (m_clockPort) \{\
            while(currentTime < endTime)\
            \{\
                yarp::os::Bottle& b = m_clockPort->prepare();\
                b.clear();\
                b.addInt(currentTime.sec);\
                b.addInt(currentTime.nsec);\
                m_clockPort->write();\
                yarp::os::SystemClock::delaySystem(getStepSize());\
                currentTime += getStepSize();\
           \}\
        \}\
\

\b \cf0 5 - conclusion\'85
\b0 \
\
There is no localised issue with the clock plugin, YARP or gazebo, but a global design issue regarding the time handling between those components.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\

\b\fs28 \ul Proposed solution :\

\b0\fs24 \ulnone \
YARP: yarp should have in its API a service to switch YARP clock from system to network and vice versa whenever necessary. Along with this, it should handle a virtual internal clock, for avoiding glitches during the time source switching.\
Gazebo Yarp Clock plugin: we should add a onUpdate behaviour, in case of the removal of a model, to let the plugin trigger the clock source of YARP (system <\'97> network).\
This proposal needs more analysis\'85\
\
Another solution would be to use the askToStop() instead of stop() in the YARP thread handling, but this would be less robust regarding dependencies between components.\
\
\
}